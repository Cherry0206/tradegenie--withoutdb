import { NextResponse } from 'next/server'
import { jsPDF } from 'jspdf'

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { analysis, type = 'risk-analysis' } = body

    if (!analysis) {
      return NextResponse.json({
        success: false,
        message: 'Analysis data is required'
      }, { status: 400 })
    }

    // Create PDF
    const doc = new jsPDF()
    const pageWidth = doc.internal.pageSize.width
    const margin = 20
    let yPosition = margin

    // Helper function to add text with word wrap
    const addText = (text: string, fontSize = 12, isBold = false) => {
      doc.setFontSize(fontSize)
      if (isBold) {
        doc.setFont(undefined, 'bold')
      } else {
        doc.setFont(undefined, 'normal')
      }
      
      const lines = doc.splitTextToSize(text, pageWidth - 2 * margin)
      doc.text(lines, margin, yPosition)
      yPosition += lines.length * (fontSize * 0.4) + 5
      
      // Check if we need a new page
      if (yPosition > doc.internal.pageSize.height - margin) {
        doc.addPage()
        yPosition = margin
      }
    }

    // Header
    addText('TRADE GENIE - RISK ANALYSIS REPORT', 18, true)
    yPosition += 10

    // Analysis Details
    addText(`Country: ${analysis.country}`, 14, true)
    addText(`Product: ${analysis.product}`, 14, true)
    addText(`Generated: ${new Date().toLocaleString()}`, 10)
    addText(`Data Source: ${analysis.dataSource || 'Enhanced Mock Data'}`, 10)
    yPosition += 10

    // Overall Risk Score
    addText('OVERALL RISK ASSESSMENT', 16, true)
    addText(`Risk Score: ${analysis.overallRisk}%`, 14)
    addText(`Risk Level: ${analysis.overallRisk < 30 ? 'Low Risk' : analysis.overallRisk < 60 ? 'Medium Risk' : 'High Risk'}`, 14)
    yPosition += 10

    // Risk Breakdown
    addText('RISK BREAKDOWN', 16, true)
    addText(`Political Risk: ${analysis.politicalRisk}%`, 12)
    addText(`Economic Risk: ${analysis.economicRisk}%`, 12)
    addText(`Compliance Risk: ${analysis.complianceRisk}%`, 12)
    addText(`Market Risk: ${analysis.marketRisk}%`, 12)
    yPosition += 10

    // Market Information
    addText('MARKET INFORMATION', 16, true)
    addText(`Tariff Rate: ${analysis.tariffRate}`, 12)
    addText(`Market Size: ${analysis.marketSize}`, 12)
    yPosition += 10

    // Opportunities
    if (analysis.opportunities && analysis.opportunities.length > 0) {
      addText('OPPORTUNITIES', 16, true)
      analysis.opportunities.forEach((opportunity: string, index: number) => {
        addText(`${index + 1}. ${opportunity}`, 11)
      })
      yPosition += 5
    }

    // Warnings
    if (analysis.warnings && analysis.warnings.length > 0) {
      addText('WARNINGS', 16, true)
      analysis.warnings.forEach((warning: string, index: number) => {
        addText(`${index + 1}. ${warning}`, 11)
      })
      yPosition += 5
    }

    // Recommendations
    if (analysis.recommendations && analysis.recommendations.length > 0) {
      addText('AI RECOMMENDATIONS', 16, true)
      analysis.recommendations.forEach((recommendation: string, index: number) => {
        addText(`${index + 1}. ${recommendation}`, 11)
      })
    }

    // Footer
    doc.setFontSize(8)
    doc.setFont(undefined, 'normal')
    doc.text('Generated by Trade Genie - Your AI-Powered Trade Intelligence Platform', 
             margin, doc.internal.pageSize.height - 10)

    // Convert to base64
    const pdfBase64 = doc.output('datauristring')

    return NextResponse.json({
      success: true,
      data: {
        pdf: pdfBase64,
        filename: `risk-analysis-${analysis.country}-${analysis.product}-${new Date().toISOString().split('T')[0]}.pdf`
      }
    })

  } catch (error) {
    console.error('PDF generation error:', error)
    return NextResponse.json({
      success: false,
      message: 'Failed to generate PDF report'
    }, { status: 500 })
  }
}
